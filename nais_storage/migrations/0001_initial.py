# Generated by Django 4.0.5 on 2022-07-03 22:35

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='название')),
                ('size', models.IntegerField(verbose_name='размер в м.кв.')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='цена')),
            ],
            options={
                'verbose_name': 'боксы',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(db_index=True, max_length=50, verbose_name='фамилия')),
                ('first_name', models.CharField(db_index=True, max_length=50, verbose_name='имя')),
                ('patronymic', models.CharField(db_index=True, max_length=50, verbose_name='отчество')),
                ('email', models.CharField(blank=True, db_index=True, max_length=100, verbose_name='email')),
                ('contact_phone', phonenumber_field.modelfields.PhoneNumberField(db_index=True, max_length=128, region=None, verbose_name='контактный телефон')),
                ('date_of_birth', models.DateField(db_index=True, verbose_name='дата рождения')),
                ('passport', models.CharField(db_index=True, max_length=20, verbose_name='серия и номер паспорта')),
                ('address', models.CharField(db_index=True, max_length=150, verbose_name='адрес')),
            ],
            options={
                'verbose_name': 'клиент',
                'verbose_name_plural': 'клиенты',
            },
        ),
        migrations.CreateModel(
            name='SeasonItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, verbose_name='название')),
                ('image', models.ImageField(max_length=30, upload_to='season_items/', verbose_name='картинка')),
                ('category', models.CharField(choices=[('МГВ', 'Малогабаритная вещь'), ('СГВ', 'Среднегабаритная вещь'), ('КГВ', 'Крупногабаритная вещь'), ('ВОХ', 'Вещь для особого хранения')], max_length=30, verbose_name='категория')),
            ],
            options={
                'verbose_name': 'вещь сезонного хранения',
                'verbose_name_plural': 'вещи для сезонного хранения',
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='название')),
                ('address', models.CharField(max_length=100, verbose_name='адрес')),
                ('contact_phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='контактный телефон')),
            ],
            options={
                'verbose_name': 'склад',
                'verbose_name_plural': 'склады',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateField(verbose_name='дата хранения с')),
                ('date_to', models.DateField(verbose_name='дата хранения по')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='цена')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='account.profile', verbose_name='клиент')),
                ('storage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='nais_storage.storage', verbose_name='склад')),
            ],
            options={
                'verbose_name': 'заказ',
                'verbose_name_plural': 'заказы',
            },
        ),
        migrations.CreateModel(
            name='SeasonOrder',
            fields=[
                ('order_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='nais_storage.order')),
                ('quantity', models.IntegerField(default=1, verbose_name='количество')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='nais_storage.seasonitem', verbose_name='сезонная вещь')),
            ],
            options={
                'verbose_name': 'заказ сезонного хранения',
                'verbose_name_plural': 'заказы сезонного хранения',
            },
            bases=('nais_storage.order',),
        ),
        migrations.CreateModel(
            name='BoxOrder',
            fields=[
                ('order_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='nais_storage.order')),
                ('box', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nais_storage.box', verbose_name='бокс')),
            ],
            options={
                'verbose_name': 'боксовый заказ',
                'verbose_name_plural': 'боксовые заказы',
            },
            bases=('nais_storage.order',),
        ),
    ]
